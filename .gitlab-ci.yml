stages:
  - prepare
  - build_and_test
  - run
  - logs

build-base-image:
  stage: prepare
  tags:
    - car_wash_frontend
  only:
    - master
  script:
    - echo "build base docker image ..."
    - docker image build . -t car_wash_frontend_base_img -f DockerfileBase 

test-base-image:
  stage: build_and_test
  tags:
    - car_wash_frontend
  only:
    - master
  script:
    - echo "test base docker image ..."
    - docker run -i --rm --name car_wash_frontend_test car_wash_frontend_base_img npm run test

build-nginx-image:
  stage: build_and_test
  tags:
    - car_wash_frontend
  only:
    - master
  script:
    - echo "build nginx docker image ..."
    - docker image build . --build-arg HTTP_PORT=${CW_FRONT_PORT} -t car_wash_frontend_img

run-frontend:
  stage: run
  tags:
    - car_wash_frontend
  only:
    - master
  script:
    - echo "stop docker container ..."
    - if [ "$( docker container inspect -f '{{.State.Running}}' car_wash_frontend_cntr )" == "true" ]; then docker stop car_wash_frontend_cntr; fi
    - echo "remove docker container ..."
    - if [ "$( docker container inspect -f '{{.Name}}' car_wash_frontend_cntr )" == "/car_wash_frontend_cntr" ]; then docker rm car_wash_frontend_cntr; fi
    - echo "create and run docker container ..."
    - > 
      docker run
      -d
      -p ${CW_FRONT_PORT}:${CW_FRONT_PORT}
      --env HTTP_PORT=${CW_FRONT_PORT}
      --name car_wash_frontend_cntr
      car_wash_frontend_img

test-startup-logs:
  stage: logs
  tags:
    - car_wash_frontend
  only:
    - master
  script:
    - sleep 30
    - docker logs car_wash_frontend_cntr 2>errors.log
    - cat ./errors.log
    - if [ "$(stat --format=%s './errors.log')" != "0" ]; then exit 1; fi
